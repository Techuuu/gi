// Code generated by "goki generate"; DO NOT EDIT.

package giv

import (
	"errors"
	"strconv"
	"strings"
	"sync/atomic"

	"goki.dev/enums"
	"goki.dev/ki/v2"
)

var _FileNodeFlagsValues = []FileNodeFlags{7, 8}

// FileNodeFlagsN is the highest valid value
// for type FileNodeFlags, plus one.
const FileNodeFlagsN FileNodeFlags = 9

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _FileNodeFlagsNoOp() {
	var x [1]struct{}
	_ = x[FileNodeOpen-(7)]
	_ = x[FileNodeSymLink-(8)]
}

var _FileNodeFlagsNameToValueMap = map[string]FileNodeFlags{
	`FileNodeOpen`:    7,
	`filenodeopen`:    7,
	`FileNodeSymLink`: 8,
	`filenodesymlink`: 8,
}

var _FileNodeFlagsDescMap = map[FileNodeFlags]string{
	7: `FileNodeOpen means file is open -- for directories, this means that sub-files should be / have been loaded -- for files, means that they have been opened e.g., for editing`,
	8: `FileNodeSymLink indicates that file is a symbolic link -- file info is all for the target of the symlink`,
}

var _FileNodeFlagsMap = map[FileNodeFlags]string{
	7: `FileNodeOpen`,
	8: `FileNodeSymLink`,
}

// String returns the string representation
// of this FileNodeFlags value.
func (i FileNodeFlags) String() string {
	str := ""
	for _, ie := range ki.FlagsValues() {
		if i.HasFlag(ie) {
			ies := ie.BitIndexString()
			if str == "" {
				str = ies
			} else {
				str += "|" + ies
			}
		}
	}
	for _, ie := range _FileNodeFlagsValues {
		if i.HasFlag(ie) {
			ies := ie.BitIndexString()
			if str == "" {
				str = ies
			} else {
				str += "|" + ies
			}
		}
	}
	return str
}

// BitIndexString returns the string
// representation of this FileNodeFlags value
// if it is a bit index value
// (typically an enum constant), and
// not an actual bit flag value.
func (i FileNodeFlags) BitIndexString() string {
	if str, ok := _FileNodeFlagsMap[i]; ok {
		return str
	}
	return ki.Flags(i).BitIndexString()
}

// SetString sets the FileNodeFlags value from its
// string representation, and returns an
// error if the string is invalid.
func (i *FileNodeFlags) SetString(s string) error {
	*i = 0
	return i.SetStringOr(s)
}

// SetStringOr sets the FileNodeFlags value from its
// string representation while preserving any
// bit flags already set, and returns an
// error if the string is invalid.
func (i *FileNodeFlags) SetStringOr(s string) error {
	flgs := strings.Split(s, "|")
	for _, flg := range flgs {
		if val, ok := _FileNodeFlagsNameToValueMap[flg]; ok {
			i.SetFlag(true, &val)
		} else if val, ok := _FileNodeFlagsNameToValueMap[strings.ToLower(flg)]; ok {
			i.SetFlag(true, &val)
		} else {
			err := (*ki.Flags)(i).SetStringOr(flg)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// Int64 returns the FileNodeFlags value as an int64.
func (i FileNodeFlags) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the FileNodeFlags value from an int64.
func (i *FileNodeFlags) SetInt64(in int64) {
	*i = FileNodeFlags(in)
}

// Desc returns the description of the FileNodeFlags value.
func (i FileNodeFlags) Desc() string {
	if str, ok := _FileNodeFlagsDescMap[i]; ok {
		return str
	}
	return ki.Flags(i).Desc()
}

// FileNodeFlagsValues returns all possible values
// for the type FileNodeFlags.
func FileNodeFlagsValues() []FileNodeFlags {
	es := ki.FlagsValues()
	res := make([]FileNodeFlags, len(es))
	for i, e := range es {
		res[i] = FileNodeFlags(e)
	}
	res = append(res, _FileNodeFlagsValues...)
	return res
}

// Values returns all possible values
// for the type FileNodeFlags.
func (i FileNodeFlags) Values() []enums.Enum {
	es := ki.FlagsValues()
	les := len(es)
	res := make([]enums.Enum, les+len(_FileNodeFlagsValues))
	for i, d := range es {
		res[i] = d
	}
	for i, d := range _FileNodeFlagsValues {
		res[i+les] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type FileNodeFlags.
func (i FileNodeFlags) IsValid() bool {
	_, ok := _FileNodeFlagsMap[i]
	if !ok {
		return ki.Flags(i).IsValid()
	}
	return ok
}

// HasFlag returns whether these
// bit flags have the given bit flag set.
func (i FileNodeFlags) HasFlag(f enums.BitFlag) bool {
	return atomic.LoadInt64((*int64)(&i))&(1<<uint32(f.Int64())) != 0
}

// SetFlag sets the value of the given
// flags in these flags to the given value.
func (i *FileNodeFlags) SetFlag(on bool, f ...enums.BitFlag) {
	var mask int64
	for _, v := range f {
		mask |= 1 << v.Int64()
	}
	in := int64(*i)
	if on {
		in |= mask
		atomic.StoreInt64((*int64)(i), in)
	} else {
		in &^= mask
		atomic.StoreInt64((*int64)(i), in)
	}
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i FileNodeFlags) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *FileNodeFlags) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}

var _DirFlagsValues = []DirFlags{0, 1, 2, 3}

// DirFlagsN is the highest valid value
// for type DirFlags, plus one.
const DirFlagsN DirFlags = 4

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _DirFlagsNoOp() {
	var x [1]struct{}
	_ = x[DirMark-(0)]
	_ = x[DirIsOpen-(1)]
	_ = x[DirSortByName-(2)]
	_ = x[DirSortByModTime-(3)]
}

var _DirFlagsNameToValueMap = map[string]DirFlags{
	`DirMark`:          0,
	`dirmark`:          0,
	`DirIsOpen`:        1,
	`dirisopen`:        1,
	`DirSortByName`:    2,
	`dirsortbyname`:    2,
	`DirSortByModTime`: 3,
	`dirsortbymodtime`: 3,
}

var _DirFlagsDescMap = map[DirFlags]string{
	0: `DirMark means directory is marked -- unmarked entries are deleted post-update`,
	1: `DirIsOpen means directory is open -- else closed`,
	2: `DirSortByName means sort the directory entries by name. this is mutex with other sorts -- keeping option open for non-binary sort choices.`,
	3: `DirSortByModTime means sort the directory entries by modification time`,
}

var _DirFlagsMap = map[DirFlags]string{
	0: `DirMark`,
	1: `DirIsOpen`,
	2: `DirSortByName`,
	3: `DirSortByModTime`,
}

// String returns the string representation
// of this DirFlags value.
func (i DirFlags) String() string {
	str := ""
	for _, ie := range _DirFlagsValues {
		if i.HasFlag(ie) {
			ies := ie.BitIndexString()
			if str == "" {
				str = ies
			} else {
				str += "|" + ies
			}
		}
	}
	return str
}

// BitIndexString returns the string
// representation of this DirFlags value
// if it is a bit index value
// (typically an enum constant), and
// not an actual bit flag value.
func (i DirFlags) BitIndexString() string {
	if str, ok := _DirFlagsMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the DirFlags value from its
// string representation, and returns an
// error if the string is invalid.
func (i *DirFlags) SetString(s string) error {
	*i = 0
	return i.SetStringOr(s)
}

// SetStringOr sets the DirFlags value from its
// string representation while preserving any
// bit flags already set, and returns an
// error if the string is invalid.
func (i *DirFlags) SetStringOr(s string) error {
	flgs := strings.Split(s, "|")
	for _, flg := range flgs {
		if val, ok := _DirFlagsNameToValueMap[flg]; ok {
			i.SetFlag(true, &val)
		} else if val, ok := _DirFlagsNameToValueMap[strings.ToLower(flg)]; ok {
			i.SetFlag(true, &val)
		} else {
			return errors.New(flg + " is not a valid value for type DirFlags")
		}
	}
	return nil
}

// Int64 returns the DirFlags value as an int64.
func (i DirFlags) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the DirFlags value from an int64.
func (i *DirFlags) SetInt64(in int64) {
	*i = DirFlags(in)
}

// Desc returns the description of the DirFlags value.
func (i DirFlags) Desc() string {
	if str, ok := _DirFlagsDescMap[i]; ok {
		return str
	}
	return i.String()
}

// DirFlagsValues returns all possible values
// for the type DirFlags.
func DirFlagsValues() []DirFlags {
	return _DirFlagsValues
}

// Values returns all possible values
// for the type DirFlags.
func (i DirFlags) Values() []enums.Enum {
	res := make([]enums.Enum, len(_DirFlagsValues))
	for i, d := range _DirFlagsValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type DirFlags.
func (i DirFlags) IsValid() bool {
	_, ok := _DirFlagsMap[i]
	return ok
}

// HasFlag returns whether these
// bit flags have the given bit flag set.
func (i DirFlags) HasFlag(f enums.BitFlag) bool {
	return atomic.LoadInt64((*int64)(&i))&(1<<uint32(f.Int64())) != 0
}

// SetFlag sets the value of the given
// flags in these flags to the given value.
func (i *DirFlags) SetFlag(on bool, f ...enums.BitFlag) {
	var mask int64
	for _, v := range f {
		mask |= 1 << v.Int64()
	}
	in := int64(*i)
	if on {
		in |= mask
		atomic.StoreInt64((*int64)(i), in)
	} else {
		in &^= mask
		atomic.StoreInt64((*int64)(i), in)
	}
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i DirFlags) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *DirFlags) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}

var _TreeViewSignalsValues = []TreeViewSignals{0, 1, 2, 3, 4, 5, 6, 7, 8}

// TreeViewSignalsN is the highest valid value
// for type TreeViewSignals, plus one.
const TreeViewSignalsN TreeViewSignals = 9

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _TreeViewSignalsNoOp() {
	var x [1]struct{}
	_ = x[TreeViewSelected-(0)]
	_ = x[TreeViewUnselected-(1)]
	_ = x[TreeViewAllSelected-(2)]
	_ = x[TreeViewAllUnselected-(3)]
	_ = x[TreeViewOpened-(4)]
	_ = x[TreeViewClosed-(5)]
	_ = x[TreeViewChanged-(6)]
	_ = x[TreeViewInserted-(7)]
	_ = x[TreeViewDeleted-(8)]
}

var _TreeViewSignalsNameToValueMap = map[string]TreeViewSignals{
	`TreeViewSelected`:      0,
	`treeviewselected`:      0,
	`TreeViewUnselected`:    1,
	`treeviewunselected`:    1,
	`TreeViewAllSelected`:   2,
	`treeviewallselected`:   2,
	`TreeViewAllUnselected`: 3,
	`treeviewallunselected`: 3,
	`TreeViewOpened`:        4,
	`treeviewopened`:        4,
	`TreeViewClosed`:        5,
	`treeviewclosed`:        5,
	`TreeViewChanged`:       6,
	`treeviewchanged`:       6,
	`TreeViewInserted`:      7,
	`treeviewinserted`:      7,
	`TreeViewDeleted`:       8,
	`treeviewdeleted`:       8,
}

var _TreeViewSignalsDescMap = map[TreeViewSignals]string{
	0: `node was selected`,
	1: `TreeView unselected`,
	2: `TreeView all items were selected`,
	3: `TreeView all items were unselected`,
	4: `closed TreeView was opened`,
	5: `open TreeView was closed -- children not visible`,
	6: `means that some kind of edit operation has taken place by the user via the gui -- we don&#39;t track the details, just that changes have happened`,
	7: `a node was inserted into the tree (Paste, DND) in this case, the data is the *source node* that was inserted`,
	8: `a node was deleted from the tree (Cut, DND Move)`,
}

var _TreeViewSignalsMap = map[TreeViewSignals]string{
	0: `TreeViewSelected`,
	1: `TreeViewUnselected`,
	2: `TreeViewAllSelected`,
	3: `TreeViewAllUnselected`,
	4: `TreeViewOpened`,
	5: `TreeViewClosed`,
	6: `TreeViewChanged`,
	7: `TreeViewInserted`,
	8: `TreeViewDeleted`,
}

// String returns the string representation
// of this TreeViewSignals value.
func (i TreeViewSignals) String() string {
	if str, ok := _TreeViewSignalsMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the TreeViewSignals value from its
// string representation, and returns an
// error if the string is invalid.
func (i *TreeViewSignals) SetString(s string) error {
	if val, ok := _TreeViewSignalsNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _TreeViewSignalsNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type TreeViewSignals")
}

// Int64 returns the TreeViewSignals value as an int64.
func (i TreeViewSignals) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the TreeViewSignals value from an int64.
func (i *TreeViewSignals) SetInt64(in int64) {
	*i = TreeViewSignals(in)
}

// Desc returns the description of the TreeViewSignals value.
func (i TreeViewSignals) Desc() string {
	if str, ok := _TreeViewSignalsDescMap[i]; ok {
		return str
	}
	return i.String()
}

// TreeViewSignalsValues returns all possible values
// for the type TreeViewSignals.
func TreeViewSignalsValues() []TreeViewSignals {
	return _TreeViewSignalsValues
}

// Values returns all possible values
// for the type TreeViewSignals.
func (i TreeViewSignals) Values() []enums.Enum {
	res := make([]enums.Enum, len(_TreeViewSignalsValues))
	for i, d := range _TreeViewSignalsValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type TreeViewSignals.
func (i TreeViewSignals) IsValid() bool {
	_, ok := _TreeViewSignalsMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i TreeViewSignals) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *TreeViewSignals) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}

var _TreeViewFlagsValues = []TreeViewFlags{10, 11, 12, 13}

// TreeViewFlagsN is the highest valid value
// for type TreeViewFlags, plus one.
const TreeViewFlagsN TreeViewFlags = 14

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _TreeViewFlagsNoOp() {
	var x [1]struct{}
	_ = x[TreeViewFlagClosed-(10)]
	_ = x[TreeViewFlagChanged-(11)]
	_ = x[TreeViewFlagNoTemplate-(12)]
	_ = x[TreeViewFlagUpdtRoot-(13)]
}

var _TreeViewFlagsNameToValueMap = map[string]TreeViewFlags{
	`TreeViewFlagClosed`:     10,
	`treeviewflagclosed`:     10,
	`TreeViewFlagChanged`:    11,
	`treeviewflagchanged`:    11,
	`TreeViewFlagNoTemplate`: 12,
	`treeviewflagnotemplate`: 12,
	`TreeViewFlagUpdtRoot`:   13,
	`treeviewflagupdtroot`:   13,
}

var _TreeViewFlagsDescMap = map[TreeViewFlags]string{
	10: `TreeViewFlagClosed means node is toggled closed (children not visible)`,
	11: `TreeViewFlagChanged is updated on the root node whenever a gui edit is made through the tree view on the tree -- this does not track any other changes that might have occurred in the tree itself. Also emits a TreeViewChanged signal on the root node.`,
	12: `TreeViewFlagNoTemplate -- this node is not using a style template -- should be restyled on any full re-render change`,
	13: `TreeViewFlagUpdtRoot -- for any update signal that comes from the source root node, do a full update of the treeview. This increases responsiveness of the updating and makes it easy to trigger a full update by updating the root node, but can be slower when not needed`,
}

var _TreeViewFlagsMap = map[TreeViewFlags]string{
	10: `TreeViewFlagClosed`,
	11: `TreeViewFlagChanged`,
	12: `TreeViewFlagNoTemplate`,
	13: `TreeViewFlagUpdtRoot`,
}

// String returns the string representation
// of this TreeViewFlags value.
func (i TreeViewFlags) String() string {
	str := ""
	for _, ie := range ki.FlagsValues() {
		if i.HasFlag(ie) {
			ies := ie.BitIndexString()
			if str == "" {
				str = ies
			} else {
				str += "|" + ies
			}
		}
	}
	for _, ie := range _TreeViewFlagsValues {
		if i.HasFlag(ie) {
			ies := ie.BitIndexString()
			if str == "" {
				str = ies
			} else {
				str += "|" + ies
			}
		}
	}
	return str
}

// BitIndexString returns the string
// representation of this TreeViewFlags value
// if it is a bit index value
// (typically an enum constant), and
// not an actual bit flag value.
func (i TreeViewFlags) BitIndexString() string {
	if str, ok := _TreeViewFlagsMap[i]; ok {
		return str
	}
	return ki.Flags(i).BitIndexString()
}

// SetString sets the TreeViewFlags value from its
// string representation, and returns an
// error if the string is invalid.
func (i *TreeViewFlags) SetString(s string) error {
	*i = 0
	return i.SetStringOr(s)
}

// SetStringOr sets the TreeViewFlags value from its
// string representation while preserving any
// bit flags already set, and returns an
// error if the string is invalid.
func (i *TreeViewFlags) SetStringOr(s string) error {
	flgs := strings.Split(s, "|")
	for _, flg := range flgs {
		if val, ok := _TreeViewFlagsNameToValueMap[flg]; ok {
			i.SetFlag(true, &val)
		} else if val, ok := _TreeViewFlagsNameToValueMap[strings.ToLower(flg)]; ok {
			i.SetFlag(true, &val)
		} else {
			err := (*ki.Flags)(i).SetStringOr(flg)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// Int64 returns the TreeViewFlags value as an int64.
func (i TreeViewFlags) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the TreeViewFlags value from an int64.
func (i *TreeViewFlags) SetInt64(in int64) {
	*i = TreeViewFlags(in)
}

// Desc returns the description of the TreeViewFlags value.
func (i TreeViewFlags) Desc() string {
	if str, ok := _TreeViewFlagsDescMap[i]; ok {
		return str
	}
	return ki.Flags(i).Desc()
}

// TreeViewFlagsValues returns all possible values
// for the type TreeViewFlags.
func TreeViewFlagsValues() []TreeViewFlags {
	es := ki.FlagsValues()
	res := make([]TreeViewFlags, len(es))
	for i, e := range es {
		res[i] = TreeViewFlags(e)
	}
	res = append(res, _TreeViewFlagsValues...)
	return res
}

// Values returns all possible values
// for the type TreeViewFlags.
func (i TreeViewFlags) Values() []enums.Enum {
	es := ki.FlagsValues()
	les := len(es)
	res := make([]enums.Enum, les+len(_TreeViewFlagsValues))
	for i, d := range es {
		res[i] = d
	}
	for i, d := range _TreeViewFlagsValues {
		res[i+les] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type TreeViewFlags.
func (i TreeViewFlags) IsValid() bool {
	_, ok := _TreeViewFlagsMap[i]
	if !ok {
		return ki.Flags(i).IsValid()
	}
	return ok
}

// HasFlag returns whether these
// bit flags have the given bit flag set.
func (i TreeViewFlags) HasFlag(f enums.BitFlag) bool {
	return atomic.LoadInt64((*int64)(&i))&(1<<uint32(f.Int64())) != 0
}

// SetFlag sets the value of the given
// flags in these flags to the given value.
func (i *TreeViewFlags) SetFlag(on bool, f ...enums.BitFlag) {
	var mask int64
	for _, v := range f {
		mask |= 1 << v.Int64()
	}
	in := int64(*i)
	if on {
		in |= mask
		atomic.StoreInt64((*int64)(i), in)
	} else {
		in &^= mask
		atomic.StoreInt64((*int64)(i), in)
	}
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i TreeViewFlags) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *TreeViewFlags) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}

var _TreeViewStatesValues = []TreeViewStates{0, 1, 2, 3}

// TreeViewStatesN is the highest valid value
// for type TreeViewStates, plus one.
const TreeViewStatesN TreeViewStates = 4

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _TreeViewStatesNoOp() {
	var x [1]struct{}
	_ = x[TreeViewActive-(0)]
	_ = x[TreeViewSel-(1)]
	_ = x[TreeViewFocus-(2)]
	_ = x[TreeViewInactive-(3)]
}

var _TreeViewStatesNameToValueMap = map[string]TreeViewStates{
	`TreeViewActive`:   0,
	`treeviewactive`:   0,
	`TreeViewSel`:      1,
	`treeviewsel`:      1,
	`TreeViewFocus`:    2,
	`treeviewfocus`:    2,
	`TreeViewInactive`: 3,
	`treeviewinactive`: 3,
}

var _TreeViewStatesDescMap = map[TreeViewStates]string{
	0: `TreeViewActive is normal state -- there but not being interacted with`,
	1: `TreeViewSel is selected`,
	2: `TreeViewFocus is in focus -- will respond to keyboard input`,
	3: `TreeViewInactive is inactive -- if SrcNode is nil, or source has &#34;inactive&#34; property set, or treeview node has inactive property set directly`,
}

var _TreeViewStatesMap = map[TreeViewStates]string{
	0: `TreeViewActive`,
	1: `TreeViewSel`,
	2: `TreeViewFocus`,
	3: `TreeViewInactive`,
}

// String returns the string representation
// of this TreeViewStates value.
func (i TreeViewStates) String() string {
	if str, ok := _TreeViewStatesMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the TreeViewStates value from its
// string representation, and returns an
// error if the string is invalid.
func (i *TreeViewStates) SetString(s string) error {
	if val, ok := _TreeViewStatesNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _TreeViewStatesNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type TreeViewStates")
}

// Int64 returns the TreeViewStates value as an int64.
func (i TreeViewStates) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the TreeViewStates value from an int64.
func (i *TreeViewStates) SetInt64(in int64) {
	*i = TreeViewStates(in)
}

// Desc returns the description of the TreeViewStates value.
func (i TreeViewStates) Desc() string {
	if str, ok := _TreeViewStatesDescMap[i]; ok {
		return str
	}
	return i.String()
}

// TreeViewStatesValues returns all possible values
// for the type TreeViewStates.
func TreeViewStatesValues() []TreeViewStates {
	return _TreeViewStatesValues
}

// Values returns all possible values
// for the type TreeViewStates.
func (i TreeViewStates) Values() []enums.Enum {
	res := make([]enums.Enum, len(_TreeViewStatesValues))
	for i, d := range _TreeViewStatesValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type TreeViewStates.
func (i TreeViewStates) IsValid() bool {
	_, ok := _TreeViewStatesMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i TreeViewStates) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *TreeViewStates) UnmarshalText(text []byte) error {
	return i.SetString(string(text))
}
